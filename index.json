[{"uri":"http://wedgevine.github.io/tool/basic/","title":"Basic","tags":[],"description":"","content":""},{"uri":"http://wedgevine.github.io/tool/basic/git/","title":"Git","tags":[],"description":"","content":""},{"uri":"http://wedgevine.github.io/tool/static-web/hugo/","title":"Hugo","tags":[],"description":"","content":"Install mkdir ~/tools/hugo wget https://github.com/gohugoio/hugo/releases/download/v0.62.2/hugo_0.62.2_Linux-64bit.deb sudo dpkg -i hugo_0.62.2_Linux-64bit.deb Setup   Local hugo repo setup\nhugo new site tool cd tool; # routine git initialization git init git config user.name \u0026quot;wedgevine\u0026quot; git config user.email \u0026quot;wedgevine@outlook.com\u0026quot; # add theme, see \u0026quot;Git Submodules basic explanation\u0026quot; git submodule add https://github.com/matcornic/hugo-theme-learn themes/hugo-theme-learn # add .gitignore cp ../know/.gitignore . # edit config.toml update base url, theme, etc # or copy existing content cp -R themes/book/exampleSite/content . prepare content or edit \u0026quot;_index.md\u0026quot;   Setting git remote url and adding key to ssh-agent, check Github setup\n  Building Hugo site and deploying to Github Pages using Github actions\nPer1, for any Github repos, gh-pages branch can be used as a public facing website, the repo itself could be anything, a Hugo site, a react app2, as long as what in the gh-pages branch is a static website. Helped by Github actions CI/CD capability, we can setup workflow to automatically build and deploy Hugo site to a repo's gh-pages branch whenever we do \u0026ldquo;git push origin master\u0026rdquo;3\n# generate keys for the repo ssh-keygen -t rsa -b 4096 -C \u0026quot;wedgevine@outlook.com\u0026quot; -f gh-pages-tool -N \u0026quot;\u0026quot; # copy pub key to repo tool - Settings - Deploy keys - Add deploy key, with name gh-pages-tool, allow write access # copy private key to Secrets - Add a new secret, with name ACTIONS_DEPLOY_KEY # create workflow file mkdir .github/workflow cd .github/workflow # vi gh-pages.yml name: github pages on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v1 with: submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.62.2' extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v2 env: ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }} PUBLISH_BRANCH: gh-pages PUBLISH_DIR: ./public   Development  docs  https://gohugo.io/documentation/ https://learn.netlify.com/en/   config.toml configuration Markdown supported by Hugo footnotes, code block, list Content/folder structure, \u0026ldquo;_index.md\u0026rdquo; layout/static folder Show children contents Cross reference, relref, ref    Github pages \u0026#x21a9;\u0026#xfe0e;\n a react app \u0026#x21a9;\u0026#xfe0e;\n Github actions \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"http://wedgevine.github.io/tool/static-web/","title":"Static website","tags":[],"description":"","content":""},{"uri":"http://wedgevine.github.io/tool/basic/git/github/","title":"Github","tags":[],"description":"","content":"Github setup   Signup account with Github and create a repo \u0026ldquo;tool\u0026rdquo;\n  Enable ssh connection to Github connect to Github through ssh 1\n # generate ssh keys cd ~/.ssh ssh-keygen -t rsa -C \u0026quot;wedgevine@outlook.com\u0026quot; -f \u0026quot;id_rsa_wedgevine\u0026quot;    Adding a new SSH key to your GitHub account\n  Per 1, create ~/.ssh/config file for each Github account\n  Setting the git remote Url for the local repositories\n cd local-repo git init git config user.name \u0026quot;wedgevine\u0026quot; git config user.email \u0026quot;wedgevine@outlook.com\u0026quot; git remote add origin git@wedgevine.github.com:wedgevine/tool.git # note the above hostname notation which shoud match what is defined in config file    Add key to ssh-agent, so don't have to input passphrase every time\n # start ssh agent eval \u0026quot;$(ssh-agent -s)\u0026quot; # check ssh keys added ssh-add -l # add ssh key ssh-add ~/.ssh/id_rsa_wedgevine    Since the key has been stored in ssh-agent, we can do normal Git add/commit/push\n  Github pages Any repo/organization/account could have a public facing static website at github.io per 2\nGithub actions Enable automatic software development workflow including CI/CD triggered by events such as \u0026ldquo;git push\u0026rdquo;.\nThere are many pre-defined actions on Github marketplace, for example, for Hugo static site, 3 can build and deploy it to Github pages automatically.\n  How to manage multiple GitHub accounts on a single machine with SSH keys \u0026#x21a9;\u0026#xfe0e;\n Types of GitHub Pages sites \u0026#x21a9;\u0026#xfe0e;\n Hugo setup \u0026#x21a9;\u0026#xfe0e;\n   "},{"uri":"http://wedgevine.github.io/tool/basic/markdown/","title":"Markdown","tags":[],"description":"","content":"Hugo Markdown Support\nfootnote\nHere's a simple footnote,[^1] and here's a longer one.[^bignote] [^1]: This is the first footnote. code block To create code blocks, indent every line of the block by at least four spaces or one tab.\nfenced code block The basic Markdown syntax allows you to create code blocks by indenting lines by four spaces or one tab. If you find that inconvenient, try using fenced code blocks. Depending on your Markdown processor or editor, you’ll use three backticks (```) or three tildes (~~~) on the lines before and after the code block. The best part? You don’t have to indent any lines!\ncode block inside list item one empty line after the list item, then ident one tab, then idented (again) code block or fenced code block\n"},{"uri":"http://wedgevine.github.io/tool/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"http://wedgevine.github.io/tool/","title":"T","tags":[],"description":"","content":"  Basic  \n Static website  \n "},{"uri":"http://wedgevine.github.io/tool/tags/","title":"Tags","tags":[],"description":"","content":""}]